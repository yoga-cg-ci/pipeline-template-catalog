library 'pipeline-library'
def hugoPodYaml = libraryResource 'podtemplates/hugo/pod.yml'
def prNumber
pipeline {
  agent {
    kubernetes {
      label 'hugo-builder'
      yaml hugoPodYaml
    }
  }
  options { 
    buildDiscarder(logRotator(numToKeepStr: '5'))
    skipDefaultCheckout true
    preserveStashes(buildCount: 2)
    disableConcurrentBuilds()
  }
  triggers {
    eventTrigger jmespathQuery("action=='closed' && repository.full_name=='${repoOwner}/${repo}'")
  }
  environment {
    repoOwner = "${repoOwner}"
    repo = "${repo}"
    githubCredentialId = "${githubCredentialId}"
    credId = "${githubCredentialId}"
  }
  stages {
    stage ('Fix Changelog') {
      // only do this if there is no prior build
      when { expression { return !currentBuild.previousBuild } }
      steps {
        checkout([
            $class: 'GitSCM',
            branches: scm.branches,
            userRemoteConfigs: scm.userRemoteConfigs,
            browser: scm.browser,
            // this extension builds the changesets from the compareTarget branch
            // Using a variable here, but do what's appropriate for your env
            extensions: [[$class: 'ChangelogToBranch', options: [compareRemote: 'origin', compareTarget: 'main']]]
        ])
      }
    }
    stage("Checkout") {
      steps {
        checkout scm
        gitShortCommit()
      }
    } 
    stage('Preview environment') {
      when {
        allOf {
          not { triggeredBy 'EventTriggerCause' }
          branch 'pr-*'
          anyOf {
            changeset "${changesetDir}/**"
            triggeredBy 'UserIdCause'
          }
        }
      }
      stages {
        stage("Build site") {
          steps {
            gitHubDeploy(repoOwner, repo, "", "${projectName} preview", "${githubCredentialId}", "true", "false")
            sh "git submodule update --init"
            dir("${sourceDir}") {
              container('hugo') {
                sh "hugo --config ${config} --contentDir ${contentDir}"
                stash name: "public", includes: "public/**,Dockerfile,nginx/**"
              }
            }
          }
        }
        stage("Build and push image") {
          steps {
            containerBuildPushGeneric("${projectName}", "${BRANCH_NAME.toLowerCase()}", "${gcpProject}"){
              unstash "public"
            }
          }
        }
        stage("Deploy Preview") {
          steps {
            cloudRunDeploy(serviceName: "${projectName}-${BRANCH_NAME.toLowerCase()}", image: "gcr.io/${gcpProject}/${projectName}:${BRANCH_NAME.toLowerCase()}", deployType: "${deployTypePR}", region: "${gcpRegionPR}", clusterName: "${clusterNamePR}", namespace: "${namespacePR}")
          }
        }
      }
    }
    stage('Master build & deploy') {
      when {
        allOf {
          not { triggeredBy 'EventTriggerCause' }
          branch 'main'
          anyOf {
            changeset "${changesetDir}/**"
            triggeredBy 'UserIdCause'
          }
        }
      }
      stages {
        stage("Build site") {
          steps {
            gitHubDeploy(repoOwner, repo, "", "${projectName} production", "${githubCredentialId}", "false", "true")
            sh "git submodule update --init"
            dir("${sourceDir}") {
              container('hugo') {
                sh "hugo --baseURL ${baseUrl} --config ${config} --contentDir ${contentDir}"
                stash name: "public", includes: "public/**"
              }
            }
          }
        }
        stage("Deploy") {
          steps {
            gcpCloudStorageDeploy("${bucketName}", "${bucketFolderName}", "${baseUrl}") {
              unstash "public"
            }
          }
        }
      }
    }  
    stage('PR Delete') {
      agent {
        kubernetes {
          label 'default-jnlp'
        }
      }
      when {
        beforeAgent true
        triggeredBy 'EventTriggerCause' 
      }
      steps {
        script {
          def event = currentBuild.getBuildCauses()[0].event
          prNumber = event.number.toString()
        }
        cloudRunDelete(serviceName: "${projectName}-pr-${prNumber}", deployType: "${deployTypePR}", region: "${gcpRegionPR}", clusterName: "${clusterNamePR}", namespace: "${namespacePR}")
      }
    }
  }
}
